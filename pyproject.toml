[project]
name = "dynamics-client"
version = "0.8.4"
description = "Client for making Web API request from a Microsoft Dynamics 365 Database."
authors = [
    { name = "Matti Lamppu", email = "lamppu.matti.akseli@gmail.com" },
]
license = "MIT"
readme = "README.md"
keywords = [
    "Microsoft",
    "Dynamics",
    "client"
]
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Developers",
    "Natural Language :: English",
]
requires-python = ">=3.10,<4"
dynamic = [
    "dependencies",
]

[project.urls]
"Homepage" = "https://mrthearman.github.io/dynamics-client"
"Repository" = "https://github.com/MrThearMan/dynamics-client"
"Bug Tracker" = "https://github.com/MrThearMan/dynamics-client/issues"
"Documentation" = "https://mrthearman.github.io/dynamics-client"

[tool.poetry]
requires-poetry = ">=2.0.0"
packages = [
    { include = "dynamics" },
]

[tool.poetry.dependencies]
httpx = ">=0.27.0"
authlib = ">=1.3.0"
aiosqlite = ">=0.20.0"
tzdata = ">=2024.1"
typing-extensions = { version = ">=4.10.0", python = "<3.11" }
Django = { version = ">=4.2", optional = true }
djangorestframework = { version = ">=3.14.0", optional = true }

[tool.poetry.group.test.dependencies]
pytest = "8.4.1"
coverage = "7.10.1"
pytest-asyncio = "1.1.0"
tox = "4.28.3"
tox-gh-actions = "3.3.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "1.6.1"
pymdown-extensions = "10.16.1"
mkdocs-mermaid2-plugin = "1.2.1"

[tool.poetry.group.lint.dependencies]
pre-commit = "4.2.0"

[tool.ruff]
fix = true
line-length = 120
exclude = [
    "tests/*",
]
lint.typing-modules = [
    "dynamics.typing",
]
lint.select = [
    "A",        # flake8-builtins
    "ANN",      # flake8-annotations
    "ARG",      # flake8-unused-arguments
    "B",        # flake8-bugbear
    "BLE",      # flake8-blind-except
    "C90",      # mccabe
    "C4",       # flake8-comprehensions
    "COM",      # flake8-commas
    "D200",     # pydocstyle: One-line docstring should fit on one line
    "D201",     # pydocstyle: No blank lines allowed before function docstring (found {num_lines})
    "D202",     # pydocstyle: No blank lines allowed after function docstring (found {num_lines})
    "D209",     # pydocstyle: Multi-line docstring closing quotes should be on a separate line
    "D213",     # pydocstyle: Multi-line docstring summary should start at the second line
    "DTZ",      # flake8-datetimez
    "E",        # pycodestyle errors
    "EM",       # flake8-errmsg
    "F",        # pyflakes
    "FBT",      # flake8-boolean-trap
    "I",        # isort
    "INP",      # flake8-no-pep420
    "ISC",      # flake8-implicit-str-concat
    "N",        # pep8-naming
    "PERF",     # perflint
    "PGH",      # pygrep-hooks
    "PIE",      # flake8-pie
    "PL",       # pylint
    "PT",       # flake8-pytest-style
    "PTH",      # flake8-use-pathlib
    "PYI",      # flake8-pyi
    "Q",        # flake8-quotes
    "RET",      # flake8-return
    "RSE",      # flake8-raise
    "RUF",      # ruff-specific rules
    "S",        # flake8-bandit
    "SIM",      # flake8-simplify
    "T20",      # flake8-print
    "TCH",      # flake8-type-checking
    "TRY",      # tryceratops
    "W",        # pycodestyle warnings
]
lint.ignore = [
    "A005",     # Allow shadowing builtin modules
    "ANN401",   # Any-typing allowed
    "FBT001",   # Boolean positional argument in function definition
    "FBT002",   # Boolean positional argument in method definition
    #
    # Conflicting with ruff-format
    #
    "COM812",   # missing-trailing-comma
    "COM819",   # prohibited-trailing-comma
    "D206",     # indent-with-spaces
    "D300",     # triple-single-quotes
    "E111",     # indentation-with-invalid-multiple
    "E114",     # indentation-with-invalid-multiple-comment
    "E117",     # over-indented
    "ISC001",   # single-line-implicit-string-concatenation
    "ISC002",   # multi-line-implicit-string-concatenation
    "Q000",     # bad-quotes-inline-string
    "Q001",     # bad-quotes-multiline-string
    "Q002",     # bad-quotes-docstring
    "Q003",     # avoidable-escaped-quote
    "W191",     # tab-indentation
]

[tool.coverage.run]
relative_files = true

[tool.coverage.report]
omit = [
    "tests/*",
    "docs/*",
    ".venv/*",
    ".tox/*",
]
exclude_lines = [
    "if TYPE_CHECKING:",
    "except ImportError:",
    "pragma: no cover",
]

[tool.pytest.ini_options]
addopts = "-vv -s --log-cli-level=INFO --disable-warnings"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py{310, 311, 312, 313}
isolated_build = true

[gh-actions]
python =
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313

[testenv]
allowlist_externals =
    poetry
setenv =
    PYTHONPATH = {toxinidir}
commands =
    poetry install
    poetry run coverage run -m pytest -vv -s --log-cli-level=INFO --disable-warnings
"""

[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"
