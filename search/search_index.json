{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dynamics Web API Client pip install dynamics-client Documentation : https://mrthearman.github.io/dynamics-client/ Source Code : https://github.com/MrThearMan/dynamics-client/ Contributing : https://github.com/MrThearMan/dynamics-client/blob/main/CONTRIBUTING.md Basic usage from dynamics import DynamicsClient , ftr # Init the client: client = DynamicsClient ( ... ) ### Example GET request: client . table = \"accounts\" # Get only these columns for the account. client . select = [ \"accountid\" , \"name\" ] # Filter to only the accounts that have been created on or after the # given ISO date string, AND that have 200 or more employees. client . filter = [ ftr . on_or_after ( \"createdon\" , \"2020-01-01T00:00:00Z\" ), ftr . ge ( \"numberofemployees\" , 200 ), ] # Expand to the contacts (collection-values navigation property) # on the account that have 'gmail.com' in their email address 1 OR 2. # Get only the 'firstname', 'lastname' and 'mobilephone' columns for these contacts. # Also expand the primary contact (single-valued navigation property). # Get only the 'emailaddress1' column for the primary contact. client . expand = { \"contact_customer_accounts\" : { \"select\" : [ \"firstname\" , \"lastname\" , \"mobilephone\" ], \"filter\" : { ftr . contains ( \"emailaddress1\" , \"gmail.com\" ), ftr . contains ( \"emailaddress2\" , \"gmail.com\" ), } }, \"primarycontactid\" : { \"select\" : [ \"emailaddress1\" ], }, } result = client . get () print ( result . data ) # [ # { # \"accountid\": ..., # \"name\": ..., # \"contact_customer_accounts\": [ # { # \"contactid\": ..., # id field is always given # \"firstname\": ..., # \"lastname\": ..., # \"mobilephone\": ... # }, # ... # ], # \"primarycontactid\": { # \"contactid\": ..., # \"emailaddress1\": ... # } # }, # ... # ] ### Example POST request # IMPORTANT!!! client . reset_query () client . table = \"contacts\" # Get only these columns from the created contact client . select = [ \"firstname\" , \"lastname\" , \"emailaddress1\" ] # The data to create the contact with. '@odata.bind' is used to link # the contact to the given navigation property. accountid = ... data = { \"firstname\" : ... , \"lastname\" : ... , \"emailaddress1\" : ... , \"parentcustomerid_account@odata.bind\" : f \"/accounts( { accountid } )\" } result = client . post ( data = data ) print ( result . data ) # { # \"contactid\": ..., # \"firstname\": ..., # \"lastname\": ..., # \"emailaddress1\": ... # } ### Example PATCH request client . reset_query () client . table = \"contacts\" client . row_id = result [ \"contactid\" ] data = { \"firstname\" : ... , \"lastname\" : ... , } result = client . patch ( data = data ) print ( result . data ) # Return all rows on the updated contact, # since no select statement was given # # { # ... # \"contactid\": ..., # \"firstname\": ..., # \"lastname\": ..., # ... # } ### Example DELETE request client . reset_query () client . table = \"contacts\" client . row_id = result [ \"contactid\" ] client . delete ()","title":"Home"},{"location":"#dynamics-web-api-client","text":"pip install dynamics-client Documentation : https://mrthearman.github.io/dynamics-client/ Source Code : https://github.com/MrThearMan/dynamics-client/ Contributing : https://github.com/MrThearMan/dynamics-client/blob/main/CONTRIBUTING.md","title":"Dynamics Web API Client"},{"location":"#basic-usage","text":"from dynamics import DynamicsClient , ftr # Init the client: client = DynamicsClient ( ... ) ### Example GET request: client . table = \"accounts\" # Get only these columns for the account. client . select = [ \"accountid\" , \"name\" ] # Filter to only the accounts that have been created on or after the # given ISO date string, AND that have 200 or more employees. client . filter = [ ftr . on_or_after ( \"createdon\" , \"2020-01-01T00:00:00Z\" ), ftr . ge ( \"numberofemployees\" , 200 ), ] # Expand to the contacts (collection-values navigation property) # on the account that have 'gmail.com' in their email address 1 OR 2. # Get only the 'firstname', 'lastname' and 'mobilephone' columns for these contacts. # Also expand the primary contact (single-valued navigation property). # Get only the 'emailaddress1' column for the primary contact. client . expand = { \"contact_customer_accounts\" : { \"select\" : [ \"firstname\" , \"lastname\" , \"mobilephone\" ], \"filter\" : { ftr . contains ( \"emailaddress1\" , \"gmail.com\" ), ftr . contains ( \"emailaddress2\" , \"gmail.com\" ), } }, \"primarycontactid\" : { \"select\" : [ \"emailaddress1\" ], }, } result = client . get () print ( result . data ) # [ # { # \"accountid\": ..., # \"name\": ..., # \"contact_customer_accounts\": [ # { # \"contactid\": ..., # id field is always given # \"firstname\": ..., # \"lastname\": ..., # \"mobilephone\": ... # }, # ... # ], # \"primarycontactid\": { # \"contactid\": ..., # \"emailaddress1\": ... # } # }, # ... # ] ### Example POST request # IMPORTANT!!! client . reset_query () client . table = \"contacts\" # Get only these columns from the created contact client . select = [ \"firstname\" , \"lastname\" , \"emailaddress1\" ] # The data to create the contact with. '@odata.bind' is used to link # the contact to the given navigation property. accountid = ... data = { \"firstname\" : ... , \"lastname\" : ... , \"emailaddress1\" : ... , \"parentcustomerid_account@odata.bind\" : f \"/accounts( { accountid } )\" } result = client . post ( data = data ) print ( result . data ) # { # \"contactid\": ..., # \"firstname\": ..., # \"lastname\": ..., # \"emailaddress1\": ... # } ### Example PATCH request client . reset_query () client . table = \"contacts\" client . row_id = result [ \"contactid\" ] data = { \"firstname\" : ... , \"lastname\" : ... , } result = client . patch ( data = data ) print ( result . data ) # Return all rows on the updated contact, # since no select statement was given # # { # ... # \"contactid\": ..., # \"firstname\": ..., # \"lastname\": ..., # ... # } ### Example DELETE request client . reset_query () client . table = \"contacts\" client . row_id = result [ \"contactid\" ] client . delete ()","title":"Basic usage"},{"location":"docs/","text":"Documentation Client from dynamics import DynamicsClient DynamicsClient(...) parameter type default description api_url str Url in form: https://{organization_uri}/api/data/v{api_version} token_url str Url in form: https://{organization_uri}/path/to/token client_id str Client id (e.g. UUID). client_secret str Client secret (e.g. OAuth password). scope str List[str] None None Url or list of urls in form: https://{organization_uri}/scope . Defines the database records that the API connection has access to. resource str None None Url in form: https://{organization_uri} . Defines the database records that the API connection has access to. cache_token bool True If False , don't cache the OAuthToken received from dynamics. connection_timeout int None 5 The timeout for all requests, specify None to disable timeouts Establish a Microsoft Dynamics 365 Dataverse API client connection using OAuth 2.0 Client Credentials Flow. Client Credentials require an application user to be created in Dynamics, and granting it an appropriate security role. Token caching By default ( cache_token=True ), the client will try to cache the OAuthToken it receives from token_url . This cache is an in-memory shared cache SQLite database, or Django's default cache if Django is installed. This allows sharing a single token between multiple processes, reducing round-trips to the token_url for new tokens if an old one is still valid. NOTE : At least one of scope or resource must be provided. If you are experiencing auth errors, inspect the returned auth token's aud and see whether it resolves to 00000002-0000-0000-c000-000000000000 instead of your CRM url.* If so, you may want to specify the resource URL using the optional resource= parameter.* DynamicsClient.from_environment() Create a Dynamics client from environment variables (see DynamicsClient(...) for more info). env parameter values default DYNAMICS_API_URL api_url str DYNAMICS_TOKEN_URL token_url str DYNAMICS_CLIENT_ID client_id str DYNAMICS_CLIENT_SECRET client_secret str DYNAMICS_SCOPE scope str (comma separated if many) None DYNAMICS_RESOURCE resource str None DYNAMICS_CACHE_TOKEN cache_token \"0\" or \"1\" \"1\" DYNAMICS_CONNECTION_TIMEOUT connection_timeout int \"5\" DynamicsClient.request_counter: int \u2192 int How many request have been made by the client so far. Client instance methods and properties client = DynamicsClient ( ... ) client.get(...) \u2192 DynamicsClientGetResponse parameter type default description not_found_ok bool False No entities found should not raise NotFound error, but return empty list instead. pagination_rules PaginationRules None None Pagination rules to apply to the query. For example, {\"pages\": 1} will fetch one extra page after the first one. If there are more pages to fetch, the next page link will be included in the next_link attribute on the response. {\"pages\": -1} can be used to fetch all pages. Use {\"pages\": ..., \"children\": {\"foo\": {\"pages\": -1}}} to fetch all pages on the child entity foo . If a child entity would have more pages to fetch, the next link would be included in the parent entity key foo@odata.nextLink . Pagination rules can be nested like this however deep you wish. query str None None Use this url instead of building it from current query parameters. Make a GET request to the Dataverse API with currently added query options. Error Simplification Available : This and the other HTTP-methods are decorated with a decorator, that can take some extra options: simplify_errors (If set True , will simplify all errors occurring during the execution of the function to just a single DynamicsException with a default error message) and raise_separately (A list exception types to exclude from the simplification, if simplify_errors=True , so that they can be handled separately). These are useful when you want to hide implementation details received in errors from frontend users. client.post(...) \u2192 DynamicsClientPostResponse parameter type default description data Dict[str, Any] POST data. query str None Use this url instead of building it from current query parameters. Create new row in a table or execute an API action or function. Must have 'table' query option set. Error Simplification Available : See client.get() client.patch(...) \u2192 DynamicsClientPatchResponse parameter type default description data Dict[str, Any] PATCH data. query str None Use this url instead of building it from current query parameters. Update row in a table. Must have table and row_id query option set. Error Simplification Available : See client.get() client.delete() \u2192 None parameter type default description query str None Use this url instead of building it from current query parameters. Delete row in a table. Must have table and row_id query option set. Error Simplification Available : See client.get() client.current_query() \u2192 str Current compiled query string. client.headers \u2192 Dict[str, str] Note: Read only. To set headers, use client[name] = value . Similarly, you can get headers with client[name] . Currently set request headers. Doesn't include per method default headers. client.reset_query() \u2192 None Resets all client options and headers. client.default_headers(...) \u2192 Dict[str, str] parameter type default description method \"get\" \"post\" \"patch\" \"delete\" Use this url instead of building it from current query parameters. Get method default headers for given method. Applied automatically on each request. client.actions: Actions Injected instance of predefined Dynamics actions. Calling methods under this property execute the actions without needing to use the POST, PATCH, or DELETE methods. It is recommended to read the API Action Reference and how to Use Web API Actions . client.functions: Functions Injected instance of predefined Dynamics functions. Calling methods under this property run the functions without needing to use the GET method. It is recommended to read the API Function Reference and how to Use Web API Functions . client.table: str \u2192 str Set the table to search in. client.action: str \u2192 str Set the Dynamics Web API action or function to use. Most of the time you don't need to set this, since you can use the .actions and .functions attributes to make these queries. client.row_id: str \u2192 str Search only from the table row with this id. If the table has an alternate key defined, you can use 'foo=bar' or 'foo=bar,fizz=buzz' to retrieve a single row. Alternate keys are not enabled by default in Dynamics, so those might not work at all. client.add_ref_to_property: str \u2192 str Add reference for this navigation property. This indicates, that POST data will contain the API url to a matching row id in the table this navigation property is meant to link to, like this: \"@odata.id\": \"<API URI>/<table>(<id>)\" . This should only be used to link existing rows. Adding references for new rows can be done on create with this in POST data: \"<nav_property>@odata.bind\": \"/<table>(<id>)\" . client.pre_expand: str \u2192 str Expand/navigate to some linked table in this table before taking any query options into account. This will save you having to use the expand statement itself, if all you are looking for is under this table anyway. client.show_annotations: bool \u2192 bool Show annotations for returned data, e.g. enum values, GUID names, etc by setting Prefer: odata.include-annotations=\"*\" header. Helpful for development and debugging. client.select(...) \u2192 List[str] parameter type default description items List[str] Columns to select. Set $select statement. Limits the properties returned from the current table. client.expand(...) \u2192 Dict[str, Optional[ExpandType]] parameter type default description items Dict[str, Optional[ExpandType]] What linked tables (a.k.a. navigation properties) to expand and what queries to make inside the expanded tables. Refer to the ExpandType TypedDict below on what queries are available, and what values they expect. Queries can be an empty dict or None, in which case no query Options are used. from typing import List , Dict , TypedDict , Union , Set , Literal class ExpandType ( TypedDict ): select : List [ str ] filter : Union [ Set [ str ], List [ str ]] top : int orderby : Dict [ str , Literal [ \"asc\" , \"desc\" ]] expand : Dict [ str , \"ExpandType\" ] Set $expand statement, with possible nested statements. Controls what data from related entities is returned. Nested expand statement limitations (WEB API v9): 1) Nested expand statements can only be applied to many-to-one/single-valued relationships. This means nested expands for collections do not work! 2) Each request can include a maximum of 10 expand statements. This applies to non-nested statements as well! There is no limit on the depth of nested expand statements, so long as the total is 10. client.filter(...) \u2192 Union[Set[str], List[str]] parameter type default description items Set[str] List[str] If a list -object, and the items. If a set -object, or the items. Set $filter statement. Sets the criteria for which entities will be returned. It is recommended to read the API Query Function Reference and how to Query data using the Web API . You can input the filters as strings, or use the included ftr object to construct them. client.apply(...) \u2192 str parameter type default description statement str Aggregate, groupby, or filter apply-string. Set the $apply statement. Aggregates or groups results. It is recommended to read Aggregate and grouping results and the FetchXML aggregation documentation You can input the apply-statement as a string, or use the included apl -object to construct it. client.top(...) \u2192 int parameter type default description number int Maximum number of results to return. Set $top statement. Limits the number of results returned. Default is to get the alphabetically first items, but client.orderby(...) can be used change this. Note: You should not use client.top(...) and client.count(...) in the same query. Also, using $top will override Prefer: odata.maxpagesize=... header preference setting. client.orderby(...) \u2192 Dict[str, Literal[\"asc\", \"desc\"]] parameter type default description items Dict[str, Literal[\"asc\", \"desc\"]] Key indicates the column to order, and value indicates ascending (asc) or descending (desc) order respectively. Set $orderby statement. Specifies the order in which items are returned. client.count(...) \u2192 bool parameter type default description value bool If True, include the count (otherwise not included by default). Set to True to include a $count statement. This adds the count of entities that match the filter criteria in the results. Count will be the first item in the list of results. Note: You should not use client.count(...) and client.top(...) in the same query. client.pagesize: int \u2192 int Specify the number of tables to return in a page. By default, this is set to 5000, which is the maximum. client.fetch_xml: str \u2192 str Set a query using the FetchXML query language. Must set table, but cannot set any other query options! Queries can be constructed with the included FetchXMLBuilder . XML Schema: https://docs.microsoft.com/en-us/powerapps/developer/data-platform/fetchxml-schema How to use: https://docs.microsoft.com/en-us/powerapps/developer/data-platform/use-fetchxml-construct-query Async Client from dynamics.client.aio import DynamicsClient The async version of client implements the HTTP methods get , post , patch , and delete fully asynchronously. It also implements the following extra methods: client.create_task(...) -> asyncio.Task parameter type default description method Callable Client method to create task for. args & kwargs Any Arguments passed to the method. Can be used to create asyncio.Tasks , which will be run using the defined query options before the task was created. This way, you can queue up many tasks and run them asynchronously, either with asyncio.gather , or from python 3.11, asyncio.TaskGroups . To use TaskGroups, just use the DynamicsClient as an async context manager. The async context manager behaves like a TaskGroup from 3.11 up, otherwise just instantiates a dynamics client like normal. async with DynamicsClient . from_environment () as client : client . table = \"foo\" client . select = [ \"bar\" ] task_1 = client . create_task ( client . get ) client . reset_query () # Remember to call this! task_2 = client . create_task ( client . actions . win_quote , quote_id = \"...\" ) response = task_1 . result () # Can also be used without the context manager client . table = \"foo\" client . select = [ \"bar\" ] task3 = client . create_task ( client . post , data = { \"foo\" : \"bar\" }) response = await task3 Exceptions from dynamics.exceptions import * If Django REST framework is installed, exceptions subclass from rest_framework.exceptions.APIException, otherwise a similar class is created and used instead. DynamicsException - Dynamics Web API call failed ParseError - Malformed request AuthenticationFailed - Incorrect authentication credentials PermissionDenied - You do not have permission to perform this action NotFound - Not found MethodNotAllowed - Method x not allowed DuplicateRecordError - Trying to save a duplicate record PayloadTooLarge - Request length is too large APILimitsExceeded - Dynamics Web API limits were exceeded OperationNotImplemented - Requested operation isn't implemented WebAPIUnavailable - Web API service isn't available API Query Functions from dynamics import ftr Object that holds $filter query string construction convenience methods. It is recommended to read the API Query Function Reference and how to Query data using the Web API . Comparison operations ftr.eq(...) \u2192 str ftr.ne(...) \u2192 str ftr.gt(...) \u2192 str ftr.ge(...) \u2192 str ftr.lt(...) \u2192 str ftr.le(...) \u2192 str parameter type default description column str Column to apply the operation to. value str int float bool None Value to compare against. lambda_indicator str None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Logical operations ftr.and_(...) \u2192 str ftr.or_(...) \u2192 str parameter type default description *args str Other filter operation strings to and/or together. **kwargs Any If has group=True - Group the operation inside parentheses. ftr.not_(...) \u2192 str parameter type default description operation str Invert this operation. Only works on standard operators! group bool Group the operation inside parentheses. Standard query functions ftr.contains(...) \u2192 str ftr.endswith(...) \u2192 str ftr.startswith(...) \u2192 str parameter type default description column str Column to apply the operation to. value str int float bool None Value to compare against. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Lambda operations ftr.any_(...) \u2192 str ftr.all_(...) \u2192 str parameter type default description collection str Name of the collection-valued navigation property for some table, for the members of which the given operation is evaluated. indicator str Item indicator to use inside the statement, typically a single letter. The same indicator should be given to the operation(s) evaluated inside this operation. operation str int float bool None Operation(s) evaluated inside this operation. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Special query functions ftr.in_(...) \u2192 str ftr.not_in(...) \u2192 str parameter type default description column str Column to check. values str int float bool None Values to evaluate against. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluate whether the value in the given column exists/doesn't exist in a list of values. ftr.between(...) \u2192 str ftr.not_between(...) \u2192 str parameter type default description column str Column to check. values str int float bool None Values that define the range. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluate whether the value in the given column is/is not between two values. ftr.contain_values(...) \u2192 str ftr.not_contain_values(...) \u2192 str parameter type default description column str Column to check. values str int float bool None Values that the column may contain. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluate whether the value in the given column contains/doesn't contain the listed values. ftr.above(...) \u2192 str ftr.above_or_equal(...) \u2192 str ftr.under(...) \u2192 str ftr.under_or_equal(...) \u2192 str ftr.not_under(...) \u2192 str parameter type default description column str Column to check. ref str int float bool None Ref. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates whether the value in column is above/above or equal/under/under or equal/not under ref in the hierarchy. ftr.today(...) \u2192 str ftr.tomorrow(...) \u2192 str ftr.yesterday(...) \u2192 str parameter type default description column str Column to check. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates whether the value in the given column equals today's/tomorrow's/yesterday\u2019s date. ftr.on(...) \u2192 str ftr.on_or_after(...) \u2192 str ftr.on_or_before(...) \u2192 str parameter type default description column str Column to check. date ISO date string (format: YYYY-mm-ddTHH:MM:SSZ) to evaluate against. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates whether the date in the given column is on/on or after/on or before the specified date. ftr.this_month(...) \u2192 str ftr.this_week(...) \u2192 str ftr.this_year(...) \u2192 str ftr.last_month(...) \u2192 str ftr.last_week(...) \u2192 str ftr.last_year(...) \u2192 str ftr.next_month(...) \u2192 str ftr.next_week(...) \u2192 str ftr.next_year(...) \u2192 str parameter type default description column str Column to check. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates whether the date in the given column is within the current/last/next month/week/year. ftr.last_7_days(...) \u2192 str parameter type default description column str Column to check. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates whether the date in the given column in the last 7 days. ftr.last_x_days(...) \u2192 str ftr.last_x_hours(...) \u2192 str ftr.last_x_months(...) \u2192 str ftr.last_x_weeks(...) \u2192 str ftr.last_x_years(...) \u2192 str ftr.next_x_days(...) \u2192 str ftr.next_x_hours(...) \u2192 str ftr.next_x_months(...) \u2192 str ftr.next_x_weeks(...) \u2192 str ftr.next_x_years(...) \u2192 str ftr.older_than_x_days(...) \u2192 str ftr.older_than_x_hours(...) \u2192 str ftr.older_than_x_minutes(...) \u2192 str ftr.older_than_x_months(...) \u2192 str ftr.older_than_x_weeks(...) \u2192 str ftr.older_than_x_years(...) \u2192 str parameter type default description column str Column to check. x int How many of the specified unit to check for. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates whether the date in the given column in the last x/in the next x/is older than x specified units. ftr.in_fiscal_period(...) \u2192 str ftr.in_fiscal_period_and_year(...) \u2192 str ftr.in_fiscal_year(...) \u2192 str ftr.in_or_after_fiscal_period_and_year(...) \u2192 str ftr.in_or_before_fiscal_period_and_year(...) \u2192 str ftr.this_fiscal_period(...) \u2192 str ftr.this_fiscal_year(...) \u2192 str ftr.last_fiscal_period(...) \u2192 str ftr.last_fiscal_year(...) \u2192 str ftr.next_fiscal_period(...) \u2192 str ftr.next_fiscal_year(...) \u2192 str ftr.last_x_fiscal_periods(...) \u2192 str ftr.last_x_fiscal_years(...) \u2192 str ftr.next_x_fiscal_periods(...) \u2192 str ftr.next_x_fiscal_periods(...) \u2192 str parameter type default description column str Column to check. year int (depends on function) Fiscal period to evaluate against. year int (depends on function) Fiscal year to evaluate against. x int (depends on function) How many of the specified unit to check for. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates value in the given column against specified fiscal period(s) and/or year(s). ftr.equal_business_id(...) \u2192 str ftr.not_business_id(...) \u2192 str parameter type default description column str Column to check. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates whether the value in the given column is equal/not equal to the specified business ID. ftr.equal_user_id(...) \u2192 str ftr.not_user_id(...) \u2192 str parameter type default description column str Column to check. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates whether the value in the given column is equal/not equal to the ID of the user. ftr.equal_user_language(...) \u2192 str ftr.equal_user_or_user_hierarchy(...) \u2192 str ftr.equal_user_or_user_hierarchy_and_teams(...) \u2192 str ftr.equal_user_or_user_teams(...) \u2192 str ftr.equal_user_teams(...) \u2192 str Evaluates whether the value in the given column is equal to the what's asked. API Apply Functions from dynamics import apl Object that holds $apply string construction convenience methods. It is recommended to read Aggregate and grouping results and the FetchXML aggregation documentation apl.groupby(...) \u2192 str parameter type default description columns List[str] Columns to group by. aggregate str None Aggregate grouped results by this apl.aggregate -function. Group results by columns, optionally aggregate. apl.aggregate(...) \u2192 str parameter type default description col_ str Column to aggregate over. with_ \"average\" \"sum\" \"min\" \"max\" \"count\" How to aggregate the columns. as_ str Aggregate result alias. Aggregate column with some aggregation function, and alias the result under some name. apl.filter(...) \u2192 str parameter type default description by filter_type* Filter results by this filter string before applying grouping. *Use the ftr -object to construct this. group_by_columns List[str] None Columns to group by. Group filtered values by columns. FetchXML Builder from dynamics.fetchxml import FetchXMLBuilder This builder can be used to build FetchXML queries for the client. It uses the Builder design pattern. Here is an example: from dynamics.fetchxml import FetchXMLBuilder fetch_xml = ( FetchXMLBuilder ( mapping = \"logical\" ) . add_entity ( name = \"account\" ) . add_attribute ( name = \"accountid\" ) . add_attribute ( name = \"name\" ) . add_attribute ( name = \"accountnumber\" ) . order ( attribute = \"name\" ) . filter () . add_condition ( attribute = \"accountnumber\" , operator = \"gt\" , value = 1000 ) . add_linked_entity ( name = \"systemuser\" , to = \"owninguser\" ) . build () ) Refer to the FetchXML documentation , and the builder docstrings for more details. Normalizers from dynamics.normalizers import * Included normalizers can be used to process the returned values to guarantee wanted types. The most common case is missing data in the Dynamics database, in which case None would be returned. Normalizer can be used to convert this to, e.g., an empty string, or any other default value. They can also be used to specify numeric data as float or int. as_int(...) \u2192 int parameter type default description value Any Value to normalize. default int 0 Default to return if casting value to int fails. as_float(...) \u2192 float parameter type default description value Any Value to normalize. default float 0.0 Default to return if casting value to float fails. as_str(...) \u2192 str parameter type default description value Any Value to normalize. default str \"\" Default to return if casting value to string fails. as_bool(...) \u2192 bool parameter type default description value Any Value to normalize. default bool False Default to return if casting value to bool fails. str_as_datetime(...) \u2192 datetime parameter type default description value Any Value to normalize. default Any None Default to return if casting value to datetime fails. Utils from dynamics.utils import * This library includes a number of helpful utilities. to_dynamics_date_format(...) \u2192 str parameter type default description date datetime Datetime object to convert. from_timezone str None Name of the timezone, from 'pytz.all_timezones', the date is in. Convert a datetime-object to Dynamics compatible ISO formatted date string. from_dynamics_date_format(...) \u2192 datetime parameter type default description date str ISO date string from Dynamics database, in form: YYYY-mm-ddTHH:MM:SSZ . to_timezone str \"UCT\" Name of the timezone, from pytz.all_timezones , to convert the date to. This won't add tzinfo , instead the actual time part will be changed from UCT to what the time is at to_timezone . Convert a ISO date string from Dynamics database to a datetime -object. cache \u2192 SQLiteCache: Instance of a SQLite based cache that the client uses to store the auth token so that it can be reused between client instances. Django's cache is preferred to this, if it is installed. Testing The library comes with a testing client and some fixtures for pytest: MockClient Dynamics Client that can be used for testing purposes. It allows mocking the responses from the real client's HTTP methods, and can even set multiple responses at once: from dynamics.test import MockClient expected = [{ \"foo\" : \"bar\" }, { \"fizz\" : \"buzz\" }] # MockClient is a builder class, so you can chain the # setup code or use on a separate line client = MockClient () . with_responses ( * expected ) response = client . get () assert response . data == expected [ 0 ] response = client . get () assert response . data == expected [ 1 ] Can be used with pytest.mark.parametrize : @pytest . mark . parametrize ( \"dynamics_client\" , [ MockClient () . with_responses ({ \"foo\" : \"bar\" }), MockClient () . with_responses ({ \"foo\" : \"baz\" }), ], indirect = True , # important! ) def test_foo ( dynamics_client ): response = dynamics_client . get () If you need to configure the DynamicsClient instance, you can create a new MockClient by inheriting from BaseMockClient and your custom DynamicsClient. from dynamics import DynamicsClient from dynamics.test import BaseMockClient class MyDynamicsClient ( DynamicsClient ): pass # Order is important, BaseMockClient first! class MyMockClient ( BaseMockClient , MyDynamicsClient ): pass client = MyMockClient () Fixtures dynamics_client An instance of MockClient that can be used to mock responses from the DynamicsClient. If you use a customized DynamicsClient, you can configure your own dynamics_client fixture like this: @pytest . fixture def dynamics_client ( request ): if not hasattr ( request , \"param\" ): yield MyMockClient () else : # When used with `pytest.mark.parametrize` yield request . param dynamics_cache An instance of the cache used by the client. Can be either an instance of the SQLiteCache that comes with the library, or Django's cache if it's installed.","title":"Documentation"},{"location":"docs/#documentation","text":"","title":"Documentation"},{"location":"docs/#client","text":"from dynamics import DynamicsClient","title":"Client"},{"location":"docs/#dynamicsclient","text":"parameter type default description api_url str Url in form: https://{organization_uri}/api/data/v{api_version} token_url str Url in form: https://{organization_uri}/path/to/token client_id str Client id (e.g. UUID). client_secret str Client secret (e.g. OAuth password). scope str List[str] None None Url or list of urls in form: https://{organization_uri}/scope . Defines the database records that the API connection has access to. resource str None None Url in form: https://{organization_uri} . Defines the database records that the API connection has access to. cache_token bool True If False , don't cache the OAuthToken received from dynamics. connection_timeout int None 5 The timeout for all requests, specify None to disable timeouts Establish a Microsoft Dynamics 365 Dataverse API client connection using OAuth 2.0 Client Credentials Flow. Client Credentials require an application user to be created in Dynamics, and granting it an appropriate security role. Token caching By default ( cache_token=True ), the client will try to cache the OAuthToken it receives from token_url . This cache is an in-memory shared cache SQLite database, or Django's default cache if Django is installed. This allows sharing a single token between multiple processes, reducing round-trips to the token_url for new tokens if an old one is still valid. NOTE : At least one of scope or resource must be provided. If you are experiencing auth errors, inspect the returned auth token's aud and see whether it resolves to 00000002-0000-0000-c000-000000000000 instead of your CRM url.* If so, you may want to specify the resource URL using the optional resource= parameter.*","title":"DynamicsClient(...)"},{"location":"docs/#dynamicsclientfrom_environment","text":"Create a Dynamics client from environment variables (see DynamicsClient(...) for more info). env parameter values default DYNAMICS_API_URL api_url str DYNAMICS_TOKEN_URL token_url str DYNAMICS_CLIENT_ID client_id str DYNAMICS_CLIENT_SECRET client_secret str DYNAMICS_SCOPE scope str (comma separated if many) None DYNAMICS_RESOURCE resource str None DYNAMICS_CACHE_TOKEN cache_token \"0\" or \"1\" \"1\" DYNAMICS_CONNECTION_TIMEOUT connection_timeout int \"5\"","title":"DynamicsClient.from_environment()"},{"location":"docs/#dynamicsclientrequest_counter-int-int","text":"How many request have been made by the client so far.","title":"DynamicsClient.request_counter: int \u2192 int"},{"location":"docs/#client-instance-methods-and-properties","text":"client = DynamicsClient ( ... )","title":"Client instance methods and properties"},{"location":"docs/#clientget-dynamicsclientgetresponse","text":"parameter type default description not_found_ok bool False No entities found should not raise NotFound error, but return empty list instead. pagination_rules PaginationRules None None Pagination rules to apply to the query. For example, {\"pages\": 1} will fetch one extra page after the first one. If there are more pages to fetch, the next page link will be included in the next_link attribute on the response. {\"pages\": -1} can be used to fetch all pages. Use {\"pages\": ..., \"children\": {\"foo\": {\"pages\": -1}}} to fetch all pages on the child entity foo . If a child entity would have more pages to fetch, the next link would be included in the parent entity key foo@odata.nextLink . Pagination rules can be nested like this however deep you wish. query str None None Use this url instead of building it from current query parameters. Make a GET request to the Dataverse API with currently added query options. Error Simplification Available : This and the other HTTP-methods are decorated with a decorator, that can take some extra options: simplify_errors (If set True , will simplify all errors occurring during the execution of the function to just a single DynamicsException with a default error message) and raise_separately (A list exception types to exclude from the simplification, if simplify_errors=True , so that they can be handled separately). These are useful when you want to hide implementation details received in errors from frontend users.","title":"client.get(...) \u2192 DynamicsClientGetResponse"},{"location":"docs/#clientpost-dynamicsclientpostresponse","text":"parameter type default description data Dict[str, Any] POST data. query str None Use this url instead of building it from current query parameters. Create new row in a table or execute an API action or function. Must have 'table' query option set. Error Simplification Available : See client.get()","title":"client.post(...) \u2192 DynamicsClientPostResponse"},{"location":"docs/#clientpatch-dynamicsclientpatchresponse","text":"parameter type default description data Dict[str, Any] PATCH data. query str None Use this url instead of building it from current query parameters. Update row in a table. Must have table and row_id query option set. Error Simplification Available : See client.get()","title":"client.patch(...) \u2192 DynamicsClientPatchResponse"},{"location":"docs/#clientdelete-none","text":"parameter type default description query str None Use this url instead of building it from current query parameters. Delete row in a table. Must have table and row_id query option set. Error Simplification Available : See client.get()","title":"client.delete() \u2192 None"},{"location":"docs/#clientcurrent_query-str","text":"Current compiled query string.","title":"client.current_query() \u2192 str"},{"location":"docs/#clientheaders-dictstr-str","text":"Note: Read only. To set headers, use client[name] = value . Similarly, you can get headers with client[name] . Currently set request headers. Doesn't include per method default headers.","title":"client.headers \u2192 Dict[str, str]"},{"location":"docs/#clientreset_query-none","text":"Resets all client options and headers.","title":"client.reset_query() \u2192 None"},{"location":"docs/#clientdefault_headers-dictstr-str","text":"parameter type default description method \"get\" \"post\" \"patch\" \"delete\" Use this url instead of building it from current query parameters. Get method default headers for given method. Applied automatically on each request.","title":"client.default_headers(...) \u2192 Dict[str, str]"},{"location":"docs/#clientactions-actions","text":"Injected instance of predefined Dynamics actions. Calling methods under this property execute the actions without needing to use the POST, PATCH, or DELETE methods. It is recommended to read the API Action Reference and how to Use Web API Actions .","title":"client.actions: Actions"},{"location":"docs/#clientfunctions-functions","text":"Injected instance of predefined Dynamics functions. Calling methods under this property run the functions without needing to use the GET method. It is recommended to read the API Function Reference and how to Use Web API Functions .","title":"client.functions: Functions"},{"location":"docs/#clienttable-str-str","text":"Set the table to search in.","title":"client.table: str \u2192 str"},{"location":"docs/#clientaction-str-str","text":"Set the Dynamics Web API action or function to use. Most of the time you don't need to set this, since you can use the .actions and .functions attributes to make these queries.","title":"client.action: str \u2192 str"},{"location":"docs/#clientrow_id-str-str","text":"Search only from the table row with this id. If the table has an alternate key defined, you can use 'foo=bar' or 'foo=bar,fizz=buzz' to retrieve a single row. Alternate keys are not enabled by default in Dynamics, so those might not work at all.","title":"client.row_id: str \u2192 str"},{"location":"docs/#clientadd_ref_to_property-str-str","text":"Add reference for this navigation property. This indicates, that POST data will contain the API url to a matching row id in the table this navigation property is meant to link to, like this: \"@odata.id\": \"<API URI>/<table>(<id>)\" . This should only be used to link existing rows. Adding references for new rows can be done on create with this in POST data: \"<nav_property>@odata.bind\": \"/<table>(<id>)\" .","title":"client.add_ref_to_property: str \u2192 str"},{"location":"docs/#clientpre_expand-str-str","text":"Expand/navigate to some linked table in this table before taking any query options into account. This will save you having to use the expand statement itself, if all you are looking for is under this table anyway.","title":"client.pre_expand: str \u2192 str"},{"location":"docs/#clientshow_annotations-bool-bool","text":"Show annotations for returned data, e.g. enum values, GUID names, etc by setting Prefer: odata.include-annotations=\"*\" header. Helpful for development and debugging.","title":"client.show_annotations: bool \u2192 bool"},{"location":"docs/#clientselect-liststr","text":"parameter type default description items List[str] Columns to select. Set $select statement. Limits the properties returned from the current table.","title":"client.select(...) \u2192 List[str]"},{"location":"docs/#clientexpand-dictstr-optionalexpandtype","text":"parameter type default description items Dict[str, Optional[ExpandType]] What linked tables (a.k.a. navigation properties) to expand and what queries to make inside the expanded tables. Refer to the ExpandType TypedDict below on what queries are available, and what values they expect. Queries can be an empty dict or None, in which case no query Options are used. from typing import List , Dict , TypedDict , Union , Set , Literal class ExpandType ( TypedDict ): select : List [ str ] filter : Union [ Set [ str ], List [ str ]] top : int orderby : Dict [ str , Literal [ \"asc\" , \"desc\" ]] expand : Dict [ str , \"ExpandType\" ] Set $expand statement, with possible nested statements. Controls what data from related entities is returned. Nested expand statement limitations (WEB API v9): 1) Nested expand statements can only be applied to many-to-one/single-valued relationships. This means nested expands for collections do not work! 2) Each request can include a maximum of 10 expand statements. This applies to non-nested statements as well! There is no limit on the depth of nested expand statements, so long as the total is 10.","title":"client.expand(...) \u2192 Dict[str, Optional[ExpandType]]"},{"location":"docs/#clientfilter-unionsetstr-liststr","text":"parameter type default description items Set[str] List[str] If a list -object, and the items. If a set -object, or the items. Set $filter statement. Sets the criteria for which entities will be returned. It is recommended to read the API Query Function Reference and how to Query data using the Web API . You can input the filters as strings, or use the included ftr object to construct them.","title":"client.filter(...) \u2192 Union[Set[str], List[str]]"},{"location":"docs/#clientapply-str","text":"parameter type default description statement str Aggregate, groupby, or filter apply-string. Set the $apply statement. Aggregates or groups results. It is recommended to read Aggregate and grouping results and the FetchXML aggregation documentation You can input the apply-statement as a string, or use the included apl -object to construct it.","title":"client.apply(...) \u2192 str"},{"location":"docs/#clienttop-int","text":"parameter type default description number int Maximum number of results to return. Set $top statement. Limits the number of results returned. Default is to get the alphabetically first items, but client.orderby(...) can be used change this. Note: You should not use client.top(...) and client.count(...) in the same query. Also, using $top will override Prefer: odata.maxpagesize=... header preference setting.","title":"client.top(...) \u2192 int"},{"location":"docs/#clientorderby-dictstr-literalasc-desc","text":"parameter type default description items Dict[str, Literal[\"asc\", \"desc\"]] Key indicates the column to order, and value indicates ascending (asc) or descending (desc) order respectively. Set $orderby statement. Specifies the order in which items are returned.","title":"client.orderby(...) \u2192 Dict[str, Literal[\"asc\", \"desc\"]]"},{"location":"docs/#clientcount-bool","text":"parameter type default description value bool If True, include the count (otherwise not included by default). Set to True to include a $count statement. This adds the count of entities that match the filter criteria in the results. Count will be the first item in the list of results. Note: You should not use client.count(...) and client.top(...) in the same query.","title":"client.count(...) \u2192 bool"},{"location":"docs/#clientpagesize-int-int","text":"Specify the number of tables to return in a page. By default, this is set to 5000, which is the maximum.","title":"client.pagesize: int \u2192 int"},{"location":"docs/#clientfetch_xml-str-str","text":"Set a query using the FetchXML query language. Must set table, but cannot set any other query options! Queries can be constructed with the included FetchXMLBuilder . XML Schema: https://docs.microsoft.com/en-us/powerapps/developer/data-platform/fetchxml-schema How to use: https://docs.microsoft.com/en-us/powerapps/developer/data-platform/use-fetchxml-construct-query","title":"client.fetch_xml: str \u2192 str"},{"location":"docs/#async-client","text":"from dynamics.client.aio import DynamicsClient The async version of client implements the HTTP methods get , post , patch , and delete fully asynchronously. It also implements the following extra methods:","title":"Async Client"},{"location":"docs/#clientcreate_task-asynciotask","text":"parameter type default description method Callable Client method to create task for. args & kwargs Any Arguments passed to the method. Can be used to create asyncio.Tasks , which will be run using the defined query options before the task was created. This way, you can queue up many tasks and run them asynchronously, either with asyncio.gather , or from python 3.11, asyncio.TaskGroups . To use TaskGroups, just use the DynamicsClient as an async context manager. The async context manager behaves like a TaskGroup from 3.11 up, otherwise just instantiates a dynamics client like normal. async with DynamicsClient . from_environment () as client : client . table = \"foo\" client . select = [ \"bar\" ] task_1 = client . create_task ( client . get ) client . reset_query () # Remember to call this! task_2 = client . create_task ( client . actions . win_quote , quote_id = \"...\" ) response = task_1 . result () # Can also be used without the context manager client . table = \"foo\" client . select = [ \"bar\" ] task3 = client . create_task ( client . post , data = { \"foo\" : \"bar\" }) response = await task3","title":"client.create_task(...) -&gt; asyncio.Task"},{"location":"docs/#exceptions","text":"from dynamics.exceptions import * If Django REST framework is installed, exceptions subclass from rest_framework.exceptions.APIException, otherwise a similar class is created and used instead. DynamicsException - Dynamics Web API call failed ParseError - Malformed request AuthenticationFailed - Incorrect authentication credentials PermissionDenied - You do not have permission to perform this action NotFound - Not found MethodNotAllowed - Method x not allowed DuplicateRecordError - Trying to save a duplicate record PayloadTooLarge - Request length is too large APILimitsExceeded - Dynamics Web API limits were exceeded OperationNotImplemented - Requested operation isn't implemented WebAPIUnavailable - Web API service isn't available","title":"Exceptions"},{"location":"docs/#api-query-functions","text":"from dynamics import ftr Object that holds $filter query string construction convenience methods. It is recommended to read the API Query Function Reference and how to Query data using the Web API .","title":"API Query Functions"},{"location":"docs/#comparison-operations","text":"","title":"Comparison operations"},{"location":"docs/#ftreq-str","text":"","title":"ftr.eq(...) \u2192 str"},{"location":"docs/#ftrne-str","text":"","title":"ftr.ne(...) \u2192 str"},{"location":"docs/#ftrgt-str","text":"","title":"ftr.gt(...) \u2192 str"},{"location":"docs/#ftrge-str","text":"","title":"ftr.ge(...) \u2192 str"},{"location":"docs/#ftrlt-str","text":"","title":"ftr.lt(...) \u2192 str"},{"location":"docs/#ftrle-str","text":"parameter type default description column str Column to apply the operation to. value str int float bool None Value to compare against. lambda_indicator str None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses.","title":"ftr.le(...) \u2192 str"},{"location":"docs/#logical-operations","text":"","title":"Logical operations"},{"location":"docs/#ftrand_-str","text":"","title":"ftr.and_(...) \u2192 str"},{"location":"docs/#ftror_-str","text":"parameter type default description *args str Other filter operation strings to and/or together. **kwargs Any If has group=True - Group the operation inside parentheses.","title":"ftr.or_(...) \u2192 str"},{"location":"docs/#ftrnot_-str","text":"parameter type default description operation str Invert this operation. Only works on standard operators! group bool Group the operation inside parentheses.","title":"ftr.not_(...) \u2192 str"},{"location":"docs/#standard-query-functions","text":"","title":"Standard query functions"},{"location":"docs/#ftrcontains-str","text":"","title":"ftr.contains(...) \u2192 str"},{"location":"docs/#ftrendswith-str","text":"","title":"ftr.endswith(...) \u2192 str"},{"location":"docs/#ftrstartswith-str","text":"parameter type default description column str Column to apply the operation to. value str int float bool None Value to compare against. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses.","title":"ftr.startswith(...) \u2192 str"},{"location":"docs/#lambda-operations","text":"","title":"Lambda operations"},{"location":"docs/#ftrany_-str","text":"","title":"ftr.any_(...) \u2192 str"},{"location":"docs/#ftrall_-str","text":"parameter type default description collection str Name of the collection-valued navigation property for some table, for the members of which the given operation is evaluated. indicator str Item indicator to use inside the statement, typically a single letter. The same indicator should be given to the operation(s) evaluated inside this operation. operation str int float bool None Operation(s) evaluated inside this operation. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses.","title":"ftr.all_(...) \u2192 str"},{"location":"docs/#special-query-functions","text":"","title":"Special query functions"},{"location":"docs/#ftrin_-str","text":"","title":"ftr.in_(...) \u2192 str"},{"location":"docs/#ftrnot_in-str","text":"parameter type default description column str Column to check. values str int float bool None Values to evaluate against. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluate whether the value in the given column exists/doesn't exist in a list of values.","title":"ftr.not_in(...) \u2192 str"},{"location":"docs/#ftrbetween-str","text":"","title":"ftr.between(...) \u2192 str"},{"location":"docs/#ftrnot_between-str","text":"parameter type default description column str Column to check. values str int float bool None Values that define the range. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluate whether the value in the given column is/is not between two values.","title":"ftr.not_between(...) \u2192 str"},{"location":"docs/#ftrcontain_values-str","text":"","title":"ftr.contain_values(...) \u2192 str"},{"location":"docs/#ftrnot_contain_values-str","text":"parameter type default description column str Column to check. values str int float bool None Values that the column may contain. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluate whether the value in the given column contains/doesn't contain the listed values.","title":"ftr.not_contain_values(...) \u2192 str"},{"location":"docs/#ftrabove-str","text":"","title":"ftr.above(...) \u2192 str"},{"location":"docs/#ftrabove_or_equal-str","text":"","title":"ftr.above_or_equal(...) \u2192 str"},{"location":"docs/#ftrunder-str","text":"","title":"ftr.under(...) \u2192 str"},{"location":"docs/#ftrunder_or_equal-str","text":"","title":"ftr.under_or_equal(...) \u2192 str"},{"location":"docs/#ftrnot_under-str","text":"parameter type default description column str Column to check. ref str int float bool None Ref. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates whether the value in column is above/above or equal/under/under or equal/not under ref in the hierarchy.","title":"ftr.not_under(...) \u2192 str"},{"location":"docs/#ftrtoday-str","text":"","title":"ftr.today(...) \u2192 str"},{"location":"docs/#ftrtomorrow-str","text":"","title":"ftr.tomorrow(...) \u2192 str"},{"location":"docs/#ftryesterday-str","text":"parameter type default description column str Column to check. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates whether the value in the given column equals today's/tomorrow's/yesterday\u2019s date.","title":"ftr.yesterday(...) \u2192 str"},{"location":"docs/#ftron-str","text":"","title":"ftr.on(...) \u2192 str"},{"location":"docs/#ftron_or_after-str","text":"","title":"ftr.on_or_after(...) \u2192 str"},{"location":"docs/#ftron_or_before-str","text":"parameter type default description column str Column to check. date ISO date string (format: YYYY-mm-ddTHH:MM:SSZ) to evaluate against. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates whether the date in the given column is on/on or after/on or before the specified date.","title":"ftr.on_or_before(...) \u2192 str"},{"location":"docs/#ftrthis_month-str","text":"","title":"ftr.this_month(...) \u2192 str"},{"location":"docs/#ftrthis_week-str","text":"","title":"ftr.this_week(...) \u2192 str"},{"location":"docs/#ftrthis_year-str","text":"","title":"ftr.this_year(...) \u2192 str"},{"location":"docs/#ftrlast_month-str","text":"","title":"ftr.last_month(...) \u2192 str"},{"location":"docs/#ftrlast_week-str","text":"","title":"ftr.last_week(...) \u2192 str"},{"location":"docs/#ftrlast_year-str","text":"","title":"ftr.last_year(...) \u2192 str"},{"location":"docs/#ftrnext_month-str","text":"","title":"ftr.next_month(...) \u2192 str"},{"location":"docs/#ftrnext_week-str","text":"","title":"ftr.next_week(...) \u2192 str"},{"location":"docs/#ftrnext_year-str","text":"parameter type default description column str Column to check. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates whether the date in the given column is within the current/last/next month/week/year.","title":"ftr.next_year(...) \u2192 str"},{"location":"docs/#ftrlast_7_days-str","text":"parameter type default description column str Column to check. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates whether the date in the given column in the last 7 days.","title":"ftr.last_7_days(...) \u2192 str"},{"location":"docs/#ftrlast_x_days-str","text":"","title":"ftr.last_x_days(...) \u2192 str"},{"location":"docs/#ftrlast_x_hours-str","text":"","title":"ftr.last_x_hours(...) \u2192 str"},{"location":"docs/#ftrlast_x_months-str","text":"","title":"ftr.last_x_months(...) \u2192 str"},{"location":"docs/#ftrlast_x_weeks-str","text":"","title":"ftr.last_x_weeks(...) \u2192 str"},{"location":"docs/#ftrlast_x_years-str","text":"","title":"ftr.last_x_years(...) \u2192 str"},{"location":"docs/#ftrnext_x_days-str","text":"","title":"ftr.next_x_days(...) \u2192 str"},{"location":"docs/#ftrnext_x_hours-str","text":"","title":"ftr.next_x_hours(...) \u2192 str"},{"location":"docs/#ftrnext_x_months-str","text":"","title":"ftr.next_x_months(...) \u2192 str"},{"location":"docs/#ftrnext_x_weeks-str","text":"","title":"ftr.next_x_weeks(...) \u2192 str"},{"location":"docs/#ftrnext_x_years-str","text":"","title":"ftr.next_x_years(...) \u2192 str"},{"location":"docs/#ftrolder_than_x_days-str","text":"","title":"ftr.older_than_x_days(...) \u2192 str"},{"location":"docs/#ftrolder_than_x_hours-str","text":"","title":"ftr.older_than_x_hours(...) \u2192 str"},{"location":"docs/#ftrolder_than_x_minutes-str","text":"","title":"ftr.older_than_x_minutes(...) \u2192 str"},{"location":"docs/#ftrolder_than_x_months-str","text":"","title":"ftr.older_than_x_months(...) \u2192 str"},{"location":"docs/#ftrolder_than_x_weeks-str","text":"","title":"ftr.older_than_x_weeks(...) \u2192 str"},{"location":"docs/#ftrolder_than_x_years-str","text":"parameter type default description column str Column to check. x int How many of the specified unit to check for. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates whether the date in the given column in the last x/in the next x/is older than x specified units.","title":"ftr.older_than_x_years(...) \u2192 str"},{"location":"docs/#ftrin_fiscal_period-str","text":"","title":"ftr.in_fiscal_period(...) \u2192 str"},{"location":"docs/#ftrin_fiscal_period_and_year-str","text":"","title":"ftr.in_fiscal_period_and_year(...) \u2192 str"},{"location":"docs/#ftrin_fiscal_year-str","text":"","title":"ftr.in_fiscal_year(...) \u2192 str"},{"location":"docs/#ftrin_or_after_fiscal_period_and_year-str","text":"","title":"ftr.in_or_after_fiscal_period_and_year(...) \u2192 str"},{"location":"docs/#ftrin_or_before_fiscal_period_and_year-str","text":"","title":"ftr.in_or_before_fiscal_period_and_year(...) \u2192 str"},{"location":"docs/#ftrthis_fiscal_period-str","text":"","title":"ftr.this_fiscal_period(...) \u2192 str"},{"location":"docs/#ftrthis_fiscal_year-str","text":"","title":"ftr.this_fiscal_year(...) \u2192 str"},{"location":"docs/#ftrlast_fiscal_period-str","text":"","title":"ftr.last_fiscal_period(...) \u2192 str"},{"location":"docs/#ftrlast_fiscal_year-str","text":"","title":"ftr.last_fiscal_year(...) \u2192 str"},{"location":"docs/#ftrnext_fiscal_period-str","text":"","title":"ftr.next_fiscal_period(...) \u2192 str"},{"location":"docs/#ftrnext_fiscal_year-str","text":"","title":"ftr.next_fiscal_year(...) \u2192 str"},{"location":"docs/#ftrlast_x_fiscal_periods-str","text":"","title":"ftr.last_x_fiscal_periods(...) \u2192 str"},{"location":"docs/#ftrlast_x_fiscal_years-str","text":"","title":"ftr.last_x_fiscal_years(...) \u2192 str"},{"location":"docs/#ftrnext_x_fiscal_periods-str","text":"","title":"ftr.next_x_fiscal_periods(...) \u2192 str"},{"location":"docs/#ftrnext_x_fiscal_periods-str_1","text":"parameter type default description column str Column to check. year int (depends on function) Fiscal period to evaluate against. year int (depends on function) Fiscal year to evaluate against. x int (depends on function) How many of the specified unit to check for. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates value in the given column against specified fiscal period(s) and/or year(s).","title":"ftr.next_x_fiscal_periods(...) \u2192 str"},{"location":"docs/#ftrequal_business_id-str","text":"","title":"ftr.equal_business_id(...) \u2192 str"},{"location":"docs/#ftrnot_business_id-str","text":"parameter type default description column str Column to check. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates whether the value in the given column is equal/not equal to the specified business ID.","title":"ftr.not_business_id(...) \u2192 str"},{"location":"docs/#ftrequal_user_id-str","text":"","title":"ftr.equal_user_id(...) \u2192 str"},{"location":"docs/#ftrnot_user_id-str","text":"parameter type default description column str Column to check. lambda_indicator bool None If this operation is evaluated inside a lambda operation, provide the lambda operations item indicator here. group bool False Group the operation inside parentheses. Evaluates whether the value in the given column is equal/not equal to the ID of the user.","title":"ftr.not_user_id(...) \u2192 str"},{"location":"docs/#ftrequal_user_language-str","text":"","title":"ftr.equal_user_language(...) \u2192 str"},{"location":"docs/#ftrequal_user_or_user_hierarchy-str","text":"","title":"ftr.equal_user_or_user_hierarchy(...) \u2192 str"},{"location":"docs/#ftrequal_user_or_user_hierarchy_and_teams-str","text":"","title":"ftr.equal_user_or_user_hierarchy_and_teams(...) \u2192 str"},{"location":"docs/#ftrequal_user_or_user_teams-str","text":"","title":"ftr.equal_user_or_user_teams(...) \u2192 str"},{"location":"docs/#ftrequal_user_teams-str","text":"Evaluates whether the value in the given column is equal to the what's asked.","title":"ftr.equal_user_teams(...) \u2192 str"},{"location":"docs/#api-apply-functions","text":"from dynamics import apl Object that holds $apply string construction convenience methods. It is recommended to read Aggregate and grouping results and the FetchXML aggregation documentation","title":"API Apply Functions"},{"location":"docs/#aplgroupby-str","text":"parameter type default description columns List[str] Columns to group by. aggregate str None Aggregate grouped results by this apl.aggregate -function. Group results by columns, optionally aggregate.","title":"apl.groupby(...) \u2192 str"},{"location":"docs/#aplaggregate-str","text":"parameter type default description col_ str Column to aggregate over. with_ \"average\" \"sum\" \"min\" \"max\" \"count\" How to aggregate the columns. as_ str Aggregate result alias. Aggregate column with some aggregation function, and alias the result under some name.","title":"apl.aggregate(...) \u2192 str"},{"location":"docs/#aplfilter-str","text":"parameter type default description by filter_type* Filter results by this filter string before applying grouping. *Use the ftr -object to construct this. group_by_columns List[str] None Columns to group by. Group filtered values by columns.","title":"apl.filter(...) \u2192 str"},{"location":"docs/#fetchxml-builder","text":"from dynamics.fetchxml import FetchXMLBuilder This builder can be used to build FetchXML queries for the client. It uses the Builder design pattern. Here is an example: from dynamics.fetchxml import FetchXMLBuilder fetch_xml = ( FetchXMLBuilder ( mapping = \"logical\" ) . add_entity ( name = \"account\" ) . add_attribute ( name = \"accountid\" ) . add_attribute ( name = \"name\" ) . add_attribute ( name = \"accountnumber\" ) . order ( attribute = \"name\" ) . filter () . add_condition ( attribute = \"accountnumber\" , operator = \"gt\" , value = 1000 ) . add_linked_entity ( name = \"systemuser\" , to = \"owninguser\" ) . build () ) Refer to the FetchXML documentation , and the builder docstrings for more details.","title":"FetchXML Builder"},{"location":"docs/#normalizers","text":"from dynamics.normalizers import * Included normalizers can be used to process the returned values to guarantee wanted types. The most common case is missing data in the Dynamics database, in which case None would be returned. Normalizer can be used to convert this to, e.g., an empty string, or any other default value. They can also be used to specify numeric data as float or int.","title":"Normalizers"},{"location":"docs/#as_int-int","text":"parameter type default description value Any Value to normalize. default int 0 Default to return if casting value to int fails.","title":"as_int(...) \u2192 int"},{"location":"docs/#as_float-float","text":"parameter type default description value Any Value to normalize. default float 0.0 Default to return if casting value to float fails.","title":"as_float(...) \u2192 float"},{"location":"docs/#as_str-str","text":"parameter type default description value Any Value to normalize. default str \"\" Default to return if casting value to string fails.","title":"as_str(...) \u2192 str"},{"location":"docs/#as_bool-bool","text":"parameter type default description value Any Value to normalize. default bool False Default to return if casting value to bool fails.","title":"as_bool(...) \u2192 bool"},{"location":"docs/#str_as_datetime-datetime","text":"parameter type default description value Any Value to normalize. default Any None Default to return if casting value to datetime fails.","title":"str_as_datetime(...) \u2192 datetime"},{"location":"docs/#utils","text":"from dynamics.utils import * This library includes a number of helpful utilities.","title":"Utils"},{"location":"docs/#to_dynamics_date_format-str","text":"parameter type default description date datetime Datetime object to convert. from_timezone str None Name of the timezone, from 'pytz.all_timezones', the date is in. Convert a datetime-object to Dynamics compatible ISO formatted date string.","title":"to_dynamics_date_format(...) \u2192 str"},{"location":"docs/#from_dynamics_date_format-datetime","text":"parameter type default description date str ISO date string from Dynamics database, in form: YYYY-mm-ddTHH:MM:SSZ . to_timezone str \"UCT\" Name of the timezone, from pytz.all_timezones , to convert the date to. This won't add tzinfo , instead the actual time part will be changed from UCT to what the time is at to_timezone . Convert a ISO date string from Dynamics database to a datetime -object.","title":"from_dynamics_date_format(...) \u2192 datetime"},{"location":"docs/#cache-sqlitecache","text":"Instance of a SQLite based cache that the client uses to store the auth token so that it can be reused between client instances. Django's cache is preferred to this, if it is installed.","title":"cache \u2192 SQLiteCache:"},{"location":"docs/#testing","text":"The library comes with a testing client and some fixtures for pytest:","title":"Testing"},{"location":"docs/#mockclient","text":"Dynamics Client that can be used for testing purposes. It allows mocking the responses from the real client's HTTP methods, and can even set multiple responses at once: from dynamics.test import MockClient expected = [{ \"foo\" : \"bar\" }, { \"fizz\" : \"buzz\" }] # MockClient is a builder class, so you can chain the # setup code or use on a separate line client = MockClient () . with_responses ( * expected ) response = client . get () assert response . data == expected [ 0 ] response = client . get () assert response . data == expected [ 1 ] Can be used with pytest.mark.parametrize : @pytest . mark . parametrize ( \"dynamics_client\" , [ MockClient () . with_responses ({ \"foo\" : \"bar\" }), MockClient () . with_responses ({ \"foo\" : \"baz\" }), ], indirect = True , # important! ) def test_foo ( dynamics_client ): response = dynamics_client . get () If you need to configure the DynamicsClient instance, you can create a new MockClient by inheriting from BaseMockClient and your custom DynamicsClient. from dynamics import DynamicsClient from dynamics.test import BaseMockClient class MyDynamicsClient ( DynamicsClient ): pass # Order is important, BaseMockClient first! class MyMockClient ( BaseMockClient , MyDynamicsClient ): pass client = MyMockClient ()","title":"MockClient"},{"location":"docs/#fixtures","text":"","title":"Fixtures"},{"location":"docs/#dynamics_client","text":"An instance of MockClient that can be used to mock responses from the DynamicsClient. If you use a customized DynamicsClient, you can configure your own dynamics_client fixture like this: @pytest . fixture def dynamics_client ( request ): if not hasattr ( request , \"param\" ): yield MyMockClient () else : # When used with `pytest.mark.parametrize` yield request . param","title":"dynamics_client"},{"location":"docs/#dynamics_cache","text":"An instance of the cache used by the client. Can be either an instance of the SQLiteCache that comes with the library, or Django's cache if it's installed.","title":"dynamics_cache"}]}